#!/usr/bin/env python3
"""
Example Test Generator

This script automatically generates test files from example files.
It scans the examples/ directory for example_*.py files and creates
corresponding test files in tests/from_examples/.
"""

import os
import re
import importlib.util
import inspect
import sys
from pathlib import Path
from typing import List, Dict, Any, Optional


def find_example_files(examples_dir: str = "examples") -> List[str]:
    """Find all example_*.py files in the examples directory."""
    examples_path = Path(examples_dir)
    if not examples_path.exists():
        return []
    
    example_files = []
    for file_path in examples_path.glob("example_*.py"):
        example_files.append(str(file_path))
    
    return example_files


def extract_functions_from_file(file_path: str) -> Dict[str, Any]:
    """Extract functions from a Python file."""
    functions = {}
    
    try:
        # Load the module dynamically
        spec = importlib.util.spec_from_file_location("example_module", file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        # Find all functions that start with 'example_'
        for name, obj in inspect.getmembers(module):
            if (inspect.isfunction(obj) and 
                name.startswith('example_') and 
                obj.__module__ == module.__name__):
                functions[name] = obj
                
    except Exception as e:
        print(f"Warning: Could not load {file_path}: {e}")
    
    return functions


def generate_test_content(example_file: str, functions: Dict[str, Any], 
                         examples_dir: str = "examples") -> str:
    """Generate test file content from example functions."""
    file_name = Path(example_file).stem  # Remove .py extension
    class_name = f"Test{file_name.replace('example_', '').title()}"
    
    # Determine relative paths
    test_to_examples = os.path.join("..", "..", examples_dir)
    
    test_content = f'''#!/usr/bin/env python3
"""
Auto-generated tests for {example_file}

This file was automatically generated by example_test_generator.py
from {example_file}.
"""

import sys
import os
import tempfile
import shutil
import json

import importlib.util

# Load the example module
example_file_path = os.path.join(os.path.dirname(__file__), '{test_to_examples}/{Path(example_file).name}')
spec = importlib.util.spec_from_file_location("example_module", example_file_path)
example_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(example_module)


class {class_name}:
    """Auto-generated tests for {example_file}"""
    
    def setup_method(self):
        """Setup test environment"""
        self.test_dir = tempfile.mkdtemp(prefix="test_")
        self.original_cwd = os.getcwd()
        os.chdir(self.test_dir)
        
        # Create necessary directories based on example file structure
        self._setup_test_environment()
    
    def teardown_method(self):
        """Cleanup test environment"""
        os.chdir(self.original_cwd)
        shutil.rmtree(self.test_dir, ignore_errors=True)
    
    def _setup_test_environment(self):
        """Setup test environment - override in subclasses if needed"""
        # Create basic directory structure
        os.makedirs("examples", exist_ok=True)
        
        # Copy any existing config files from original examples directory
        original_examples = os.path.join(self.original_cwd, "{examples_dir}")
        if os.path.exists(original_examples):
            for item in os.listdir(original_examples):
                src_path = os.path.join(original_examples, item)
                dst_path = os.path.join("examples", item)
                if os.path.isfile(src_path):
                    shutil.copy2(src_path, dst_path)
                elif os.path.isdir(src_path):
                    shutil.copytree(src_path, dst_path, dirs_exist_ok=True)
'''
    
    # Add test methods for each function
    for func_name, func in functions.items():
        test_method_name = f"test_{func_name}"
        docstring = func.__doc__ or f"Test {func_name} function"
        
        test_content += f'''
    def {test_method_name}(self):
        """{docstring}"""
        # Run the example function - if it raises an exception, the test will fail
        example_module.{func_name}()
        # If no exception is raised, the test passes
        assert True
'''
    
    test_content += "\n"
    return test_content


def find_orphaned_test_files(examples_dir: str, tests_dir: str) -> List[str]:
    """Find test files that don't have corresponding example files."""
    examples_path = Path(examples_dir)
    tests_path = Path(tests_dir)
    
    if not tests_path.exists():
        return []
    
    # Get all example files
    example_files = set()
    if examples_path.exists():
        for file_path in examples_path.glob("example_*.py"):
            example_files.add(file_path.stem)  # Remove .py extension
    
    # Find orphaned test files
    orphaned_files = []
    for test_file in tests_path.glob("test_example_*.py"):
        # Extract example name from test file name
        # test_example_xxx.py -> example_xxx
        test_name = test_file.stem  # Remove .py extension
        example_name = test_name.replace("test_", "", 1)  # Remove "test_" prefix
        
        if example_name not in example_files:
            orphaned_files.append(str(test_file))
    
    return orphaned_files


def clean_orphaned_tests(examples_dir: str, tests_dir: str) -> List[str]:
    """Remove test files that don't have corresponding example files."""
    orphaned_files = find_orphaned_test_files(examples_dir, tests_dir)
    
    if orphaned_files:
        print(f"Found {len(orphaned_files)} orphaned test files:")
        for orphaned_file in orphaned_files:
            print(f"  - {orphaned_file}")
        
        # Ask for confirmation
        response = input("Remove orphaned test files? (y/n): ").lower().strip()
        if response in ['y', 'yes']:
            removed_files = []
            for orphaned_file in orphaned_files:
                try:
                    os.remove(orphaned_file)
                    removed_files.append(orphaned_file)
                    print(f"Removed: {orphaned_file}")
                except OSError as e:
                    print(f"Failed to remove {orphaned_file}: {e}")
            
            print(f"Removed {len(removed_files)} orphaned test files.")
            return removed_files
        else:
            print("Orphaned test files preserved.")
    
    return []


def generate_tests(examples_dir: str = "examples", tests_dir: str = "tests/from_examples") -> List[str]:
    """Generate test files for all example files."""
    # Create tests directory
    tests_path = Path(tests_dir)
    tests_path.mkdir(parents=True, exist_ok=True)
    
    # Check for orphaned test files
    orphaned_files = find_orphaned_test_files(examples_dir, tests_dir)
    if orphaned_files:
        print(f"Warning: Found {len(orphaned_files)} orphaned test files:")
        for orphaned_file in orphaned_files:
            print(f"  - {orphaned_file}")
        print("Use --clean-orphaned to remove them.")
    
    # Find all example files
    example_files = find_example_files(examples_dir)
    print(f"Found {len(example_files)} example files:")
    
    generated_files = []
    
    for example_file in example_files:
        print(f"  - {example_file}")
        
        # Extract functions from the example file
        functions = extract_functions_from_file(example_file)
        
        if not functions:
            print(f"    Warning: No example functions found in {example_file}")
            continue
        
        print(f"    Found {len(functions)} functions: {list(functions.keys())}")
        
        # Generate test content
        test_content = generate_test_content(example_file, functions, examples_dir)
        
        # Create test file
        file_name = Path(example_file).stem
        test_file_name = f"test_{file_name}.py"
        test_file_path = tests_path / test_file_name
        
        with open(test_file_path, 'w') as f:
            f.write(test_content)
        
        generated_files.append(str(test_file_path))
        print(f"    Generated: {test_file_path}")
    
    print(f"\nGenerated {len(generated_files)} test files:")
    for test_file in generated_files:
        print(f"  - {test_file}")
    
    return generated_files


def clean_generated_tests(tests_dir: str = "tests/from_examples") -> None:
    """Remove all generated test files."""
    tests_path = Path(tests_dir)
    if not tests_path.exists():
        print(f"No {tests_dir} directory found.")
        return
    
    removed_files = []
    for test_file in tests_path.glob("test_example_*.py"):
        test_file.unlink()
        removed_files.append(test_file)
        print(f"Removed: {test_file}")
    
    print(f"Removed {len(removed_files)} generated test files.")


def parse_cli_arguments(args: Optional[List[str]] = None) -> Any:
    """Parse command line arguments for the CLI interface."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Generate tests from example files")
    parser.add_argument("--clean", action="store_true", help="Remove all generated test files")
    parser.add_argument("--regenerate", action="store_true", help="Clean and regenerate all test files")
    parser.add_argument("--clean-orphaned", "--clean_orphaned", action="store_true", help="Remove test files without corresponding example files")
    parser.add_argument("--examples-dir", default="examples", help="Directory containing example files")
    parser.add_argument("--tests-dir", default="tests/from_examples", help="Directory to generate test files")
    
    return parser.parse_args(args)


def run_cli(args: Optional[List[str]] = None) -> int:
    """Run the CLI interface with the given arguments."""
    parsed_args = parse_cli_arguments(args)
    
    try:
        if parsed_args.clean:
            clean_generated_tests(parsed_args.tests_dir)
        elif parsed_args.regenerate:
            print("Cleaning existing generated tests...")
            clean_generated_tests(parsed_args.tests_dir)
            print("\nGenerating new tests...")
            generate_tests(parsed_args.examples_dir, parsed_args.tests_dir)
        elif parsed_args.clean_orphaned:
            clean_orphaned_tests(parsed_args.examples_dir, parsed_args.tests_dir)
        else:
            generate_tests(parsed_args.examples_dir, parsed_args.tests_dir)
        return 0
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return 1


if __name__ == "__main__":
    sys.exit(run_cli())
